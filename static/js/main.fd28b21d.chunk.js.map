{"version":3,"sources":["Investors/styles.module.sass","InvestorDetail/AddInvestmentModal/styles.module.sass","InvestorDetail/styles.module.sass","Modal/styles.module.sass","Layout/index.js","Layout/Layout.js","Investors/queries.js","Investors/InvestorRow.js","Pagination/index.js","Pagination/Pagination.js","Investors/index.js","Investors/Investors.js","InvestorDetail/queries.js","Modal/index.js","Modal/Modal.js","InvestorDetail/AddInvestmentModal/queries.js","InvestorDetail/AddInvestmentModal/index.js","InvestorDetail/AddInvestmentModal/AddInvestmentModal.js","InvestorDetail/InvestorInvestments.js","InvestorDetail/index.js","InvestorDetail/InvestorDetail.js","App.js","serviceWorker.js","index.js","Layout/styles.module.sass"],"names":["module","exports","Layout","showNav","children","pathname","useLocation","push","useHistory","tabValue","startsWith","Box","p","Container","Typography","component","align","gutterBottom","className","styles","headTitle","variant","color","m","Tabs","value","onChange","_","Tab","label","Divider","tabDivider","GET_INVESTORS","gql","InvestorRow","investor","investments","map","investment","company","name","join","TableRow","TableCell","investorLink","to","id","Grid","container","spacing","alignItems","wrap","item","Avatar","investorAvatar","alt","src","photo_thumbnail","investorName","ml","Pagination","pageSize","setPageSize","page","setPage","total","firstItem","lastItem","mx","Select","ev","target","MenuItem","IconButton","disabled","onClick","Investors","useState","useQuery","variables","limit","offset","loading","error","data","Button","CircularProgress","length","Table","TableHead","TableBody","key","justify","investor_aggregate","aggregate","count","GET_INVESTOR_DETAIL","Modal","isOpen","onClose","modal","open","Paper","GET_ALL_COMPANIES","ADD_INVESTMENT","AddInvestmentModal","useMutation","addInvestment","loadingAdd","errorAdding","client","useApolloClient","selectedCompany","setSelectedCompany","amount","setAmount","updateCache","resetStore","FormControl","modalInput","InputLabel","labelId","TextField","parsedNumber","Number","isNaN","company_id","investor_id","update","catch","console","log","InvestorInvestments","isAddModalOpen","setIsAddModalOpen","Intl","NumberFormat","format","InvestorDetail","useParams","totalAmountInvested","reduce","acc","md","photo_large","startIcon","theme","createMuiTheme","palette","primary","main","secondary","App","StylesProvider","injectFirst","ThemeProvider","basename","process","exact","path","Boolean","window","location","hostname","match","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.fd28b21d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"investorAvatar\":\"styles_investorAvatar__2GZdz\",\"investorName\":\"styles_investorName__3sL-F\",\"investorLink\":\"styles_investorLink__1_fm0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalInput\":\"styles_modalInput__WTFER\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"investorAvatar\":\"styles_investorAvatar__3N_Y1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"styles_modal__3ayrX\"};","import Layout from \"./Layout\";\n\nexport default Layout;\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Container from \"@material-ui/core/Container\";\nimport { useLocation, useHistory } from \"react-router-dom\";\n\nimport styles from \"./styles.module.sass\";\n\nconst INVESTORS_TAB = \"INVESTORS\";\nconst COMPANIES_TAB = \"COMPANIES\";\n\nconst Layout = ({ showNav, children }) => {\n  const { pathname } = useLocation();\n  const { push } = useHistory();\n\n  const tabValue = pathname.startsWith(\"/investors\")\n    ? INVESTORS_TAB\n    : COMPANIES_TAB;\n\n  const onTabChange = (_, value) => {\n    value === INVESTORS_TAB ? push(\"/investors\") : push(\"/companies\");\n  };\n\n  return (\n    <Box p={8}>\n      <Container>\n        <Typography component=\"h1\" align=\"left\" gutterBottom>\n          <Typography\n            className={styles.headTitle}\n            variant=\"h5\"\n            component=\"span\"\n            color=\"primary\"\n          >\n            INVESTOR\n          </Typography>\n          <Typography\n            className={styles.headTitle}\n            variant=\"h5\"\n            component=\"span\"\n          >\n            BOOK\n          </Typography>\n        </Typography>\n        <Box m={4} />\n        {showNav ? (\n          <>\n            <Tabs value={tabValue} onChange={onTabChange}>\n              <Tab value={INVESTORS_TAB} label=\"Investors\" />\n              <Tab value={COMPANIES_TAB} label=\"Companies\" />\n            </Tabs>\n            <Divider className={styles.tabDivider} />\n          </>\n        ) : null}\n        <Box m={2} />\n        {children}\n      </Container>\n    </Box>\n  );\n};\n\nexport default Layout;\n","import { gql } from \"@apollo/client\";\n\nexport const GET_INVESTORS = gql`\n  query GetInvestors($limit: Int!, $offset: Int!) {\n    investor_aggregate {\n      aggregate {\n        count\n      }\n    }\n    investor(limit: $limit, offset: $offset) {\n      id\n      name\n      photo_thumbnail\n      investments {\n        company {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\n\nimport styles from \"./styles.module.sass\";\nimport { Link } from \"react-router-dom\";\n\nconst InvestorRow = ({ investor }) => {\n  const investments = investor.investments\n    .map((investment) => investment.company.name)\n    .join(\", \");\n  return (\n    <TableRow>\n      <TableCell>\n        <Link className={styles.investorLink} to={`/investors/${investor.id}`}>\n          <Grid container spacing={2} alignItems=\"center\" wrap=\"nowrap\">\n            <Grid item>\n              <Avatar\n                className={styles.investorAvatar}\n                alt={investor.name}\n                src={investor.photo_thumbnail}\n              />\n            </Grid>\n            <Grid item>\n              <strong className={styles.investorName}>{investor.name}</strong>\n            </Grid>\n            <Grid item>\n              <Box ml={4} />\n            </Grid>\n          </Grid>\n        </Link>\n      </TableCell>\n      <TableCell>{investments}</TableCell>\n    </TableRow>\n  );\n};\n\nexport default InvestorRow;\n","import Pagination from \"./Pagination\";\n\nexport default Pagination;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Box from \"@material-ui/core/Box\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForwardIos\";\n\nconst Pagination = ({ pageSize, setPageSize, page, setPage, total }) => {\n  const firstItem = page * pageSize + 1;\n  const lastItem = firstItem + pageSize - 1;\n  return (\n    <Grid container wrap=\"nowrap\" alignItems=\"center\">\n      <Grid item>Rows per page:</Grid>\n      <Grid item>\n        <Box mx={0.5} />\n      </Grid>\n      <Grid item>\n        <Select\n          value={pageSize}\n          onChange={(ev) => setPageSize(ev.target.value)}\n        >\n          <MenuItem value={5}>5</MenuItem>\n          <MenuItem value={6}>6</MenuItem>\n          <MenuItem value={7}>7</MenuItem>\n          <MenuItem value={8}>8</MenuItem>\n          <MenuItem value={9}>9</MenuItem>\n          <MenuItem value={10}>10</MenuItem>\n        </Select>\n      </Grid>\n      <Grid item>\n        <Box mx={2} />\n      </Grid>\n      <Grid item>\n        {firstItem} - {lastItem} of {total}\n      </Grid>\n      <Grid item></Grid>\n      <Grid item>\n        <Box mx={2} />\n      </Grid>\n      <Grid item>\n        <IconButton disabled={page === 0} onClick={() => setPage(page - 1)}>\n          <ArrowBackIcon />\n        </IconButton>\n      </Grid>\n      <Grid item>\n        <IconButton\n          disabled={lastItem >= total}\n          onClick={() => setPage(page + 1)}\n        >\n          <ArrowForwardIcon />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Pagination;\n","import Investors from \"./Investors\";\n\nexport default Investors;\n","import React, { useState } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery } from \"@apollo/client\";\n\nimport { GET_INVESTORS } from \"./queries\";\nimport InvestorRow from \"./InvestorRow\";\n\nimport Pagination from \"../Pagination\";\n\nconst Investors = () => {\n  const [pageSize, setPageSize] = useState(5);\n  const [page, setPage] = useState(0);\n  const { loading, error, data } = useQuery(GET_INVESTORS, {\n    variables: { limit: pageSize, offset: page * pageSize },\n  });\n\n  return (\n    <>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item>\n          <Typography align=\"left\" variant=\"h3\" component=\"h2\">\n            Investors\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Button color=\"primary\" variant=\"outlined\">\n            Add Investor\n          </Button>\n        </Grid>\n      </Grid>\n      {loading ? <CircularProgress /> : null}\n      {!loading && !error && data?.investor?.length ? (\n        <>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>NAME</TableCell>\n                <TableCell>INVESTMENTS</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.investor.map((investor) => (\n                <InvestorRow key={investor.id} investor={investor} />\n              ))}\n            </TableBody>\n          </Table>\n          <Box m={1} />\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Pagination\n                pageSize={pageSize}\n                setPageSize={setPageSize}\n                page={page}\n                setPage={setPage}\n                total={data.investor_aggregate.aggregate.count}\n              />\n            </Grid>\n          </Grid>\n        </>\n      ) : null}\n      {error ? (\n        <Typography color=\"error\" variant=\"h5\">\n          Ooops, Something went wrong, try reloading.\n        </Typography>\n      ) : null}\n    </>\n  );\n};\n\nexport default Investors;\n","import { gql } from \"@apollo/client\";\n\nexport const GET_INVESTOR_DETAIL = gql`\n  query GetInvestorDetail($id: Int!) {\n    investor: investor_by_pk(id: $id) {\n      id\n      name\n      photo_large\n      investments {\n        id\n        amount\n        company {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n","import Modal from \"./Modal\";\n\nexport default Modal;\n","import React from \"react\";\nimport MaterialModal from \"@material-ui/core/Modal\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Box from \"@material-ui/core/Box\";\n\nimport styles from \"./styles.module.sass\";\n\nconst Modal = ({ isOpen, onClose, children }) => {\n  return (\n    <MaterialModal className={styles.modal} open={isOpen} onClose={onClose}>\n      <Paper>\n        <Box p={4}>{children}</Box>\n      </Paper>\n    </MaterialModal>\n  );\n};\n\nexport default Modal;\n","import { gql } from \"@apollo/client\";\n\nexport const GET_ALL_COMPANIES = gql`\n  query GetAllCompanies {\n    company(limit: 100) {\n      id\n      name\n    }\n  }\n`;\n\nexport const ADD_INVESTMENT = gql`\n  mutation AddInvestment($investment: investment_insert_input!) {\n    investment: insert_investment_one(object: $investment) {\n      id\n      amount\n      company {\n        id\n        name\n      }\n    }\n  }\n`;\n","import AddInvestmentModal from \"./AddInvestmentModal\";\n\nexport default AddInvestmentModal;\n","import React, { useState } from \"react\";\nimport Modal from \"../../Modal\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Box from \"@material-ui/core/Box\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport { useQuery, useMutation, useApolloClient } from \"@apollo/client\";\n\nimport { GET_ALL_COMPANIES, ADD_INVESTMENT } from \"./queries\";\nimport styles from \"./styles.module.sass\";\n\nconst AddInvestmentModal = ({ isOpen, onClose, investor }) => {\n  const { error, data, loading } = useQuery(GET_ALL_COMPANIES);\n  const [\n    addInvestment,\n    { loading: loadingAdd, error: errorAdding },\n  ] = useMutation(ADD_INVESTMENT);\n  const client = useApolloClient();\n  const [selectedCompany, setSelectedCompany] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n\n  const onAmountChange = (ev) => {\n    const parsedNumber = Number(ev.target.value);\n    if ((!isNaN(parsedNumber) && parsedNumber > 0) || ev.target.value === \"\") {\n      setAmount(ev.target.value);\n    }\n  };\n\n  const updateCache = () => {\n    // TODO: Actually update cache instead of resetting it\n    setAmount(\"\");\n    setSelectedCompany(\"\");\n    client.resetStore();\n    onClose();\n  };\n\n  const onSubmit = () => {\n    const investment = {\n      amount,\n      company_id: selectedCompany,\n      investor_id: Number(investor.id),\n    };\n\n    addInvestment({ variables: { investment }, update: updateCache }).catch(\n      console.log\n    );\n  };\n\n  // TODO: Handle Errors More Gracefully\n  return (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      {loading ? <CircularProgress /> : null}\n      {!loading && !error && !errorAdding && data.company ? (\n        <>\n          <Typography align=\"left\" variant=\"h6\" component=\"h4\">\n            Add Investment\n          </Typography>\n          <Typography align=\"left\" variant=\"body1\">\n            Please enter the details of the investment.\n          </Typography>\n          <Box m={2} />\n          <FormControl className={styles.modalInput}>\n            <InputLabel id=\"company-select\">Select Company</InputLabel>\n            <Select\n              value={selectedCompany}\n              onChange={(ev) => setSelectedCompany(ev.target.value)}\n              labelId=\"company-select\"\n            >\n              {data.company.map((company) => (\n                <MenuItem key={company.id} value={company.id}>\n                  {company.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n          <Box m={2} />\n          <TextField\n            value={amount}\n            onChange={onAmountChange}\n            className={styles.modalInput}\n            label=\"Investment Amount\"\n          />\n          <Box m={2} />\n          <Grid container spacing={2} justify=\"flex-end\">\n            <Grid item>\n              <Button disabled={loadingAdd} onClick={onClose} color=\"primary\">\n                Cancel\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                disabled={loadingAdd || !amount || !selectedCompany}\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={onSubmit}\n              >\n                {loadingAdd ? \"Sending...\" : \"Add Investment\"}\n              </Button>\n            </Grid>\n          </Grid>\n        </>\n      ) : null}\n      {error || errorAdding ? (\n        <Typography variant=\"h4\" color=\"error\">\n          Oops, Something went wrong, try reloading.\n        </Typography>\n      ) : null}\n    </Modal>\n  );\n};\n\nexport default AddInvestmentModal;\n","import React, { useState } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport AddInvestmentModal from \"./AddInvestmentModal\";\n\nconst InvestorInvestments = ({ investor, investments }) => {\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n\n  const onCloseAddModal = () => setIsAddModalOpen(false);\n  const onOpenAddModal = () => setIsAddModalOpen(true);\n\n  return (\n    <>\n      <Grid container spacing={2} alignItems=\"center\">\n        <Grid item>\n          <Typography align=\"left\" variant=\"body1\" component=\"h3\">\n            Investments\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Button color=\"primary\" onClick={onOpenAddModal}>\n            + Add Investment\n          </Button>\n        </Grid>\n      </Grid>\n      <Box m={2} />\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>NAME</TableCell>\n            <TableCell>AMOUNT</TableCell>\n            <TableCell align=\"right\">ACTIONS</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {investments.map((investment) => (\n            <TableRow key={investment.id}>\n              <TableCell>{investment.company.name}</TableCell>\n              <TableCell>\n                ${Intl.NumberFormat().format(investment.amount)}\n              </TableCell>\n              <TableCell align=\"right\">\n                <IconButton>\n                  <EditIcon />\n                </IconButton>\n                <IconButton>\n                  <DeleteIcon />\n                </IconButton>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <AddInvestmentModal\n        investor={investor}\n        isOpen={isAddModalOpen}\n        onClose={onCloseAddModal}\n      />\n    </>\n  );\n};\n\nexport default InvestorInvestments;\n","import InvestorDetail from \"./InvestorDetail\";\n\nexport default InvestorDetail;\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Button from \"@material-ui/core/Button\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBackIos\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\n\nimport styles from \"./styles.module.sass\";\n\nimport { GET_INVESTOR_DETAIL } from \"./queries\";\nimport InvestorInvestments from \"./InvestorInvestments\";\n\nconst InvestorDetail = () => {\n  const { push } = useHistory();\n  const { id } = useParams();\n\n  const { loading, error, data } = useQuery(GET_INVESTOR_DETAIL, {\n    variables: { id },\n  });\n\n  const totalAmountInvested = data?.investor?.investments?.reduce(\n    (acc, investment) => acc + investment.amount,\n    0\n  );\n\n  return (\n    <Grid alignItems=\"center\" container spacing={2}>\n      <Grid md={1} item>\n        <IconButton onClick={() => push(\"/investors\")}>\n          <ArrowBackIcon />\n        </IconButton>\n      </Grid>\n      {loading ? (\n        <Grid md={1} item>\n          <CircularProgress />\n        </Grid>\n      ) : null}\n      {!loading && !error && data?.investor ? (\n        <>\n          <Grid md={1} item>\n            <Avatar\n              className={styles.investorAvatar}\n              src={data.investor.photo_large}\n            />\n          </Grid>\n          <Grid md={10} item>\n            <Grid container justify=\"space-between\">\n              <Grid item>\n                <Typography\n                  align=\"left\"\n                  variant=\"h5\"\n                  component=\"h2\"\n                  gutterBottom\n                >\n                  {data.investor.name}\n                </Typography>\n                <Typography variant=\"body1\">\n                  Total Amount Invested: $\n                  {Intl.NumberFormat().format(totalAmountInvested)}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Grid container spacing={2}>\n                  <Grid item>\n                    <Button startIcon={<EditIcon />}>Edit Name</Button>\n                  </Grid>\n                  <Grid item>\n                    <Button startIcon={<DeleteIcon />}>Remove Investor</Button>\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid md={2} item />\n          <Grid item md={10}>\n            <Box m={4} />\n            <InvestorInvestments\n              investor={data.investor}\n              investments={data.investor.investments}\n            />\n          </Grid>\n        </>\n      ) : null}\n      {error ? (\n        <Typography variant=\"h3\" color=\"error\">\n          Oops! Something went wrong, try reloading.\n        </Typography>\n      ) : null}\n    </Grid>\n  );\n};\n\nexport default InvestorDetail;\n","import React from \"react\";\nimport {\n  StylesProvider,\n  ThemeProvider,\n  createMuiTheme,\n} from \"@material-ui/core/styles\";\nimport { BrowserRouter, Switch, Route, Redirect } from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport Layout from \"./Layout\";\nimport Investors from \"./Investors\";\nimport InvestorDetail from \"./InvestorDetail\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#4970f8\",\n    },\n    secondary: {\n      main: \"#000000\",\n    },\n  },\n});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StylesProvider injectFirst>\n        <ThemeProvider theme={theme}>\n          <BrowserRouter basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route exact path=\"/\">\n                <Redirect to=\"/investors\" />\n              </Route>\n              <Route exact path=\"/investors\">\n                <Layout showNav>\n                  <Investors />\n                </Layout>\n              </Route>\n              <Route exact path=\"/investors/:id\">\n                <Layout>\n                  <InvestorDetail />\n                </Layout>\n              </Route>\n              <Route exact path=\"/companies\">\n                <Layout showNav />\n              </Route>\n            </Switch>\n          </BrowserRouter>\n        </ThemeProvider>\n      </StylesProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"fontsource-roboto\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://electric-kangaroo-87.hasura.app/v1/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headTitle\":\"styles_headTitle__2ZPYu\",\"tabDivider\":\"styles_tabDivider__2PjMT\"};"],"sourceRoot":""}